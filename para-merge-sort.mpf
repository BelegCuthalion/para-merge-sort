program paraMergeSort;
architecture shared (8);
const n=8;

var arr, temp: array[0..n-1] of real;
i, j: integer;

function binRank(index, first, last: integer): integer;
var rank, mid: integer;
begin
	rank := 0;
	mid := (first + last) div 2;
	if index > mid then
		while arr[mid+1]=arr[mid] do
			mid := mid + 1
	else
		while arr[mid-1]=arr[mid] do
			mid := mid - 1;
	if arr[index] > arr[mid] then
	begin
		rank := rank + mid - first + 1;
		if first <> last then
			rank := rank + binRank(index, mid+1, last);
	end
	else if arr[index] < arr[mid] then
		if first <> last then
			rank := rank + binRank(index, first, mid-1)
	else if arr[index] = arr[mid] then
	begin
		rank := rank + mid - first;
		if index > mid then
			rank := rank + 1;
	end;
	binRank := rank;
end;

procedure putInPlace(index, first, isoFirst, isoLast: integer);
var rank: integer;
begin
	rank := binRank(index, isoFirst, isoLast);
	temp[index+rank-first] := arr[index];
end;

procedure paraMergeSort(first, last: integer);
var mid: integer;
begin
	mid := (first+last) div 2;
	if last-first>1 then
	begin
		paraMergeSort(first, mid);
		paraMergeSort(mid+1, last);
	end;
	fork forall i:=first to mid do
		putInPlace(i, first, mid+1, last);
	fork forall j:=mid+1 to last do
		putInPlace(j, mid+1, first, mid);
	join;
	join;
	for i:=first to last do
		arr[i] := temp[i];
end;

begin
	for i:=0 to n-1 do
		Readln(arr[i]);
	paraMergeSort(0, n-1);
	for i:=0 to n-1 do
		Writeln(arr[i]);
end.